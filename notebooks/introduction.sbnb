# %% [markdown]
# Introducing Starboard Notebook
Starboard brings cell-by-cell notebooks to the browser, no code is running on the backend here!
It's probably the quickest way to visualize some data with interactivity, do some prototyping, or build a rudimentary dashboard.

#### Some features
* Mix Markdown, $\LaTeX$, HTML, CSS, Javascript, and Python.
* The file format is a plaintext file, which plays nice with version control systems like git.
* Runs entirely in your browser, everything is static: no server, no setup and no build step.
* You can embed a fully functional notebook on your website.

Let's see it in action!

> Tip: Press the â–¶ Play button on the left to run a cell's code.

# %% [javascript]
// You write vanilla Javascript
const greeting = "Hello world!";

// The last statement in a cell will be displayed if it is not undefined.
greeting
# %% [html]
<div id="my-element" style="background-color: #ddf; padding: 0 1em;">
  <b>You can mix and match different types of cells</b>
</div>
# %% [javascript]
// Your browser does the work, so stuff like this just works
document.querySelector("#my-element").style.backgroundColor = "#fdf";

const titleElement = document.createElement("h3");
titleElement.innerText = "Great!"

// If you return a HTML element and it will be appended below
titleElement
# %% [javascript]
// There's a little bit of (optional) magic, if you use `var` your variable will be available globally.
var magic = "I can print this in the next cell!";

// The previous cell's result is available as $_
console.log($_)
# %% [javascript]
// Poof!
console.log(magic);
# %% [javascript]
// We can import code dynamically, top level await is supported.
const {default: Confetti} = await import('https://cdn.skypack.dev/canvas-confetti');

function fireConfetti(event) {
    const x = event.clientX / document.body.clientWidth;
    const y = event.clientY / document.body.clientHeight;
    Confetti({origin: {x, y}});
}

// You can use lit-html for templating if you want to
html`<button @click=${fireConfetti}>Fire Confetti ðŸŽ‰</button>`;
# %% [esm]
// There is also an ES module cell type, any variable or function you export is available in the global scope
// In ES Modules you can use top-level imports like you are probably used to
import twas from "https://cdn.skypack.dev/twas"

// This value is now available in any cell as it is exported
export const javascriptInventionDate = Date.parse('04 Dec 1995 00:12:00 GMT')

// The default export gets printed below and used as cell return value
export default "Javascript was invented " + twas(javascriptInventionDate)
# %% [css]
/* The editor itself also runs in the sandbox, you can modify or extend it however you wish as you go.

Let's make the editor a bit more funky by adding some CSS, changes are applied immediately */

starboard-cell:focus-within .cell-container {
    background-color: #fff;  /* Change this to #faf */

    /* Uncomment this for a dark mode effect!
    filter: invert() hue-rotate(180deg);
    */
}
# %% [javascript]
// Finally, let's create a tiny API based app in just a few lines: an advice button.
const adviceElement = document.createElement("span");

async function onClick(event) {
    // Example response: {"slip": { "id": 163, "advice": "Big things have small beginnings."}}
    const data = await (await fetch(`https://api.adviceslip.com/advice`, {cache: "no-store"})).json();
    adviceElement.innerText = data.slip.advice;

    // Uncomment to make it fire confetti too
    // fireConfetti(event);
}


html`
<div style="padding: 0.4em 1em; background-color: #fff; border: 1px solid">
    <button @click=${onClick}>Give me advice</button>
    ${adviceElement}
</div>
`
# %% [markdown]
That's it! I hope that both the advice and Starboard are useful for you.
